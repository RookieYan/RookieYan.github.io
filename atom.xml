<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://RookieYan.github.io</id>
    <title>Gridea</title>
    <updated>2020-04-18T17:27:17.236Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://RookieYan.github.io"/>
    <link rel="self" href="https://RookieYan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://RookieYan.github.io/images/avatar.png</logo>
    <icon>https://RookieYan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[[2020-04-18]MySQL（一）SQL的执行流程]]></title>
        <id>https://RookieYan.github.io/post/2020-04-18mysqlyi-sql-de-zhi-xing-liu-cheng/</id>
        <link href="https://RookieYan.github.io/post/2020-04-18mysqlyi-sql-de-zhi-xing-liu-cheng/">
        </link>
        <updated>2020-04-18T14:28:24.000Z</updated>
        <content type="html"><![CDATA[<p>  之前的由于不小心把所有的博客都删了，所以从0开始重新写吧。因为最近在看MySQL和MongoDB相关的，这篇就先从MySQL开始了.. 后续会继续补上MongoDB的内容..<br>
  这篇主要是讲一下MySQL的基础.. 包括语句的执行流程..</p>
<p><img src="https://RookieYan.github.io/post-images/1587222171337.png" alt="" loading="lazy"><br>
  首先简单介绍一下MySQL的基础结构图，可以从这张图清楚的看出一条语句在MySQL的各个功能模块中的执行过程。<br>
  大体来说MySQL 可以分为<strong>Server层</strong> 和 <strong>存储引擎层</strong>两部分。<br>
  Server层包含了连接器，分析器，优化器，执行器等.. 涵盖了大部分MySQL的核心功能，一级所有的内置函数（比如时间，日期，数学和加密函数等），所有跨存储引擎的功能都在这一层中，比如存储过程，触发器，视图等等..</p>
<p>  存储引擎层则负责数据的存储和提取。他的架构模式是插件式的，支持多种不同的数据库存储引擎，比如InnoDB，MyISAM，Memory等.. 现在比较常用的是InnoDB，在MySQL5.5.5开始成为了MySQL默认的存储引擎。</p>
<p>  也就是说你每次在创建表的时候，如果不指定存储引擎，就会默认使用InnoDB存储引擎。当然也可以自定义使用别的存储引擎，比如在 create table 语句中使用 engine=memory 来指定存储引擎创建表。<strong>不同的存储引擎对于数据的存取方式也不相同，支持的功能也不相同，在后面我们会说一下关于不同场景下不同存储引擎的选择。</strong></p>
<p>接下来介绍一下Server层的各个组件。</p>
<h2 id="连接器"><strong>连接器</strong></h2>
<p>  每次我们输入账号密码和MySQL要建立连接的时候，接待我们的就是<strong>连接器</strong>，他负责跟客户端建立连接，获取权限信息，维持和管理连接。一般的连接命令</p>
<pre><code>mysql -h$ip -P$port -u$user -p
</code></pre>
<ul>
<li>如果用户名或密码不对，你就会收到一个&quot;Access denied for user&quot;的错误，然后客户端程序结束执行。</li>
<li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li>
</ul>
<pre><code>这样也就意味着，只要一个客户通过连接器建立了与MySQL的连接，
再去对这个客户帐号进行权限上的操作，都不会即时生效，
只能等到这次连接结束，下次再建立连接的时候才会生效。
</code></pre>
<p>  如果建立完连接没有后续操作的话，那么这个连接就会处于空闲的状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p>
<p><img src="https://RookieYan.github.io/post-images/1587223843571.png" alt="" loading="lazy"><br>
  客户端如果太长时间没有动静，连接器就会自动断开它。 这个参数主要是由<strong>wait_timeout</strong>控制的，默认值是 8 小时。<br>
  而如果恰好在连接断开之后，客户端再次发送请求的话，就会收到错误提醒 Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。</p>
<p>   在数据库中，客户端与数据库建立连接的过程是十分复杂且消耗资源的，所以建议使用长链接（<strong>长链接是指如果在客户端与数据库连接成功后，如果客户端持续有请求进来，那么会继续使用当前已经建立好的这个连接。 而短连接主要是指，在每次执行完很少的几次操作后，就自动断开连接，如果再有新的请求，就重新建立连接。 这样比较消耗资源</strong>）， 但是如果全部使用长连接之后会发现数据库内存占用会涨的飞快，这是因为MySQL在执行过程中，临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才会释放。所以长连接积累下来就会导致内存占用率特别高，被系统强行干掉（OOM），从现象上看就像是MySQL异常重启了。</p>
<p>怎么解决这个问题呢？你可以考虑以下两种方案。</p>
<ul>
<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>
<li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ul>
<h2 id="查询缓存"><strong>查询缓存</strong></h2>
<p>   在通过连接器创建完连接之后，就要执行SQL命令了，比如一个查询语句，这个时候执行逻辑就会来到第二步，查询缓存。</p>
<p>   MySQL拿到一个查询请求后，会先到查询缓存看一下，之前是否执行过这条语句。 之前查询过的会以key-value对的形式，被直接缓存在内存中。key是查询语句，value是查询结果。 如果能够在缓存中找到这个key，那么这个value就会直接返回给客户端。</p>
<p>   如果语句不在查询缓存中，就会继续后面的执行阶段，进行查询。查询完成后执行结果就会被存储到查询缓存中。 可以看到，如果命中查询缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p>
<p><strong>但是在大多数情况下，是不建议使用查询缓存的，为什么呢？因为查询缓存网往弊大于利。</strong></p>
<p>   主要原因是因为查询缓存失效的概率非常大，为什么呢？因为每次只要对某一张表有更新操作，这个表上所有的查询缓存都会被清空。 因此可能你费劲把结果存起来之后，还没有用呢，一个更新语句就把缓存清空了。这样对于更新操作比较频繁的数据库来说，查询缓存的命中率会非常低。除非是一张静态的lookUp表，很长时间才会更新一次。比如系统配置表，行政区划表等表上的查询才会比较适合使用查询缓存。<br>
   好在MySQL也提供这种“按需使用”的方式，你可以将参数query_cache_type设置为DEMAND，这样对于默认的SQL语句都不使用查询缓存。 而对于你确定要使用查询缓存的语句可以用SQL_CACHE 显式指定，像下面这个语句一样：</p>
<pre><code>select SQL_CACHE * from T where ID=10；
</code></pre>
<ul>
<li>需要注意的是，MySQL8.0版本已经直接删除了查询缓存功能。</li>
</ul>
<h2 id="分析器"><strong>分析器</strong></h2>
<p>  如果没有命中查询缓存，就要开始真正执行SQL语句了，首先MySQL需要知道你要做什么，因此需要对MySQL语句做解析。<br>
  分析器会现做“词法解析”，你输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。</p>
<p>  MySQL 从你输入的&quot;select&quot;这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。<br>
  做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。<br>
  如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。</p>
<pre><code>
mysql&gt; elect * from t where ID=1;

ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1
</code></pre>
<p>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</p>
<p><strong><a href="https://tech.meituan.com/2018/05/20/sql-parser-used-in-mtdp.html">详细语法SQL解析流程，来自美团技术团队，点击跳转</a></strong></p>
<h2 id="优化器"><strong>优化器</strong></h2>
<p>  经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<br>
  优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：</p>
<pre><code>mysql&gt; select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;
</code></pre>
<ul>
<li>既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</li>
<li>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</li>
</ul>
<p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，我会在后面的博客中单独展开说明优化器的内容。</p>
<h2 id="执行器"><strong>执行器</strong></h2>
<p>  MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。<br>
  开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p>
<pre><code>mysql&gt; select * from T where ID=10;ERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T'
</code></pre>
<p>  如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。<br>
  比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>
<ul>
<li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li>
<li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li>
<li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li>
</ul>
<p>  至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。<br>
  你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。<br>
  在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[2020-04-11]重新开始]]></title>
        <id>https://RookieYan.github.io/post/2020-04-11chong-xin-kai-shi/</id>
        <link href="https://RookieYan.github.io/post/2020-04-11chong-xin-kai-shi/">
        </link>
        <updated>2020-04-11T14:49:04.000Z</updated>
        <content type="html"><![CDATA[<p>  之前因为搭了一个Ngrok，被黑客扫到了，把电脑黑了。然后今天重装了系统，格式化了硬盘，一不小心把博客也都清了... 没办法...  回不去的就留在过去吧...  重新写....</p>
<p>  加油...</p>
]]></content>
    </entry>
</feed>